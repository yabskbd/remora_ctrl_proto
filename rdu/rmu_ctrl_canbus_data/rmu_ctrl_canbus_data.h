/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.2.0 Thu Aug  5 21:11:38 2021.
 */

#ifndef RMU_CTRL_CANBUS_DATA_H
#define RMU_CTRL_CANBUS_DATA_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define RMU_CTRL_CANBUS_DATA_DPFC1_FRAME_ID (0x18fd7cfeu)
#define RMU_CTRL_CANBUS_DATA_IC1_FRAME_ID (0x18fef6feu)
#define RMU_CTRL_CANBUS_DATA_LFE_FRAME_ID (0x18fef2feu)
#define RMU_CTRL_CANBUS_DATA_EI_FRAME_ID (0x1cfe92feu)
#define RMU_CTRL_CANBUS_DATA_EGF1_FRAME_ID (0xcf00afeu)
#define RMU_CTRL_CANBUS_DATA_EEC3_FRAME_ID (0x18fedffeu)
#define RMU_CTRL_CANBUS_DATA_EEC2_FRAME_ID (0xcf003feu)
#define RMU_CTRL_CANBUS_DATA_EEC1_FRAME_ID (0xcf004feu)
#define RMU_CTRL_CANBUS_DATA_EC1_FRAME_ID (0x18fee3feu)
#define RMU_CTRL_CANBUS_DATA_CCVS_FRAME_ID (0x18fef1feu)
#define RMU_CTRL_CANBUS_DATA_AT1_IG2_FRAME_ID (0x18fdb4feu)
#define RMU_CTRL_CANBUS_DATA_AT1_IMG_FRAME_ID (0x18fdb2feu)
#define RMU_CTRL_CANBUS_DATA_AT1_OG2_FRAME_ID (0x18fdb3feu)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_FRAME_ID (0x1ffu)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_0_FRAME_ID (0x100u)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_1_FRAME_ID (0x101u)

/* Frame lengths in bytes. */
#define RMU_CTRL_CANBUS_DATA_DPFC1_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_IC1_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_LFE_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EI_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EGF1_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EEC3_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EEC2_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EEC1_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EC1_LENGTH (39u)
#define RMU_CTRL_CANBUS_DATA_CCVS_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_AT1_IG2_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_AT1_IMG_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_AT1_OG2_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_0_LENGTH (8u)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_1_LENGTH (8u)

/* Extended or standard frame types. */
#define RMU_CTRL_CANBUS_DATA_DPFC1_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_IC1_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_LFE_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_EI_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_EGF1_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_EEC3_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_EEC2_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_EEC1_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_EC1_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_CCVS_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_AT1_IG2_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_AT1_IMG_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_AT1_OG2_IS_EXTENDED (1)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_IS_EXTENDED (0)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_0_IS_EXTENDED (0)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_1_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define RMU_CTRL_CANBUS_DATA_DPFC1_CYCLE_TIME_MS (0u)
#define RMU_CTRL_CANBUS_DATA_IC1_CYCLE_TIME_MS (500u)
#define RMU_CTRL_CANBUS_DATA_LFE_CYCLE_TIME_MS (100u)
#define RMU_CTRL_CANBUS_DATA_EI_CYCLE_TIME_MS (100u)
#define RMU_CTRL_CANBUS_DATA_EGF1_CYCLE_TIME_MS (50u)
#define RMU_CTRL_CANBUS_DATA_EEC3_CYCLE_TIME_MS (250u)
#define RMU_CTRL_CANBUS_DATA_EEC2_CYCLE_TIME_MS (50u)
#define RMU_CTRL_CANBUS_DATA_EEC1_CYCLE_TIME_MS (100u)
#define RMU_CTRL_CANBUS_DATA_EC1_CYCLE_TIME_MS (0u)
#define RMU_CTRL_CANBUS_DATA_CCVS_CYCLE_TIME_MS (100u)
#define RMU_CTRL_CANBUS_DATA_AT1_IG2_CYCLE_TIME_MS (500u)
#define RMU_CTRL_CANBUS_DATA_AT1_IMG_CYCLE_TIME_MS (500u)
#define RMU_CTRL_CANBUS_DATA_AT1_OG2_CYCLE_TIME_MS (500u)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_CYCLE_TIME_MS (0u)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_0_CYCLE_TIME_MS (0u)
#define RMU_CTRL_CANBUS_DATA_EGT_DATA_1_CYCLE_TIME_MS (0u)

/* Signal choices. */
#define RMU_CTRL_CANBUS_DATA_DPFC1_DSL_PRTCLT_FLTR_PSSV_RGNRTION_STATUS_NOT_ACTIVE_CHOICE (0u)
#define RMU_CTRL_CANBUS_DATA_DPFC1_DSL_PRTCLT_FLTR_PSSV_RGNRTION_STATUS_ACTIVE_CHOICE (1u)
#define RMU_CTRL_CANBUS_DATA_DPFC1_DSL_PRTCLT_FLTR_PSSV_RGNRTION_STATUS_RESERVED_FOR_SAE_ASSIGNMENT_CHOICE (2u)
#define RMU_CTRL_CANBUS_DATA_DPFC1_DSL_PRTCLT_FLTR_PSSV_RGNRTION_STATUS_NOT_AVAILABLE_CHOICE (3u)

#define RMU_CTRL_CANBUS_DATA_DPFC1_DSL_PRTCLT_FLTR_ACTV_RGNRTION_STATUS_NOT_ACTIVE_CHOICE (0u)
#define RMU_CTRL_CANBUS_DATA_DPFC1_DSL_PRTCLT_FLTR_ACTV_RGNRTION_STATUS_ACTIVE_CHOICE (1u)
#define RMU_CTRL_CANBUS_DATA_DPFC1_DSL_PRTCLT_FLTR_ACTV_RGNRTION_STATUS_RGNRTN_NDD_ATMTCLLY_INTTD_ACTV_RGNRT_CHOICE (2u)
#define RMU_CTRL_CANBUS_DATA_DPFC1_DSL_PRTCLT_FLTR_ACTV_RGNRTION_STATUS_NOT_AVAILABLE_CHOICE (3u)

/**
 * Signals in message DPFC1.
 *
 * Diesel Particulate Filter Control 1
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_dpfc1_t {
    /**
     * Indicates the state of diesel particulate filter passive regeneration.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsl_prtclt_fltr_pssv_rgnrtion_status;

    /**
     * Indicates the state of diesel particulate filter active regeneration.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t dsl_prtclt_fltr_actv_rgnrtion_status;
};

/**
 * Signals in message IC1.
 *
 * Intake/Exhaust Conditions 1
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_ic1_t {
    /**
     * Temperature of combustion byproducts leaving the engine.
     *
     * Range: 0..64255.04 (-273..1734.97 deg C)
     * Scale: 0.03125
     * Offset: -273
     */
    uint16_t eng_exhaust_gas_temp;
};

/**
 * Signals in message LFE.
 *
 * Fuel Economy (Liquid)
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_lfe_t {
    /**
     * Amount of fuel consumed by engine per unit of time.
     *
     * Range: 0..64255 (0..3212.75 L/h)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t eng_fuel_rate;
};

/**
 * Signals in message EI.
 *
 * Engine Information
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_ei_t {
    /**
     * Estimate of the power developed by the engine.
     *
     * Range: 0..64255 (0..32127.5 kW)
     * Scale: 0.5
     * Offset: 0
     */
    uint16_t instantaneous_est_brake_power;
};

/**
 * Signals in message EGF1.
 *
 * Engine Gas Flow Rate
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_egf1_t {
    /**
     * Mass flow rate of fresh air entering the engine air intake, before any EGR mixer, if used.
     *
     * Range: 0..64255 (0..3212.75 kg/h)
     * Scale: 0.05
     * Offset: 0
     */
    uint16_t eng_intake_air_mass_flow_rate;
};

/**
 * Signals in message EEC3.
 *
 * Electronic Engine Controller 3
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_eec3_t {
    /**
     * Measured/calculated exhaust gas mass upstream of the aftertreatment system in exhaust bank 1 and 2.
     *
     * Range: 0..64255 (0..12851 kg/h)
     * Scale: 0.2
     * Offset: 0
     */
    uint16_t aftrtratment1_exhaust_gas_mass_flow;
};

/**
 * Signals in message EEC2.
 *
 * Electronic Engine Controller 2
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_eec2_t {
    /**
     * The ratio of actual engine percent torque (indicated) to maximum indicated torque available at the current engine speed,
     *
     * Range: 0..250 (0..250 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eng_percent_load_at_current_speed;
};

/**
 * Signals in message EEC1.
 *
 * Electronic Engine Controller 1
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_eec1_t {
    /**
     * The calculated output torque of the engine.
     *
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t actual_eng_percent_torque;

    /**
     * Actual engine speed which is calculated over a minimum crankshaft angle of 720 degrees divided by the number of cylinders.
     *
     * Range: 0..64255.04 (0..8031.88 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_speed;
};

/**
 * Signals in message EC1.
 *
 * Engine Configuration 1
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_ec1_t {
    /**
     * This parameter is the 100% reference value for all defined indicated engine torque parameters.
     *
     * Range: 0..64255 (0..64255 Nm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eng_reference_torque;
};

/**
 * Signals in message CCVS.
 *
 * Cruise Control/Vehicle Speed
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_ccvs_t {
    /**
     * Speed of the vehicle as calculated from wheel or tailshaft speed.
     *
     * Range: 0..64254.976 (0..250.996 km/h)
     * Scale: 0.00390625
     * Offset: 0
     */
    uint16_t wheel_based_vehicle_speed;
};

/**
 * Signals in message AT1IG2.
 *
 * Aftertreatment 1 Intake Gas 2
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_at1_ig2_t {
    /**
     * The reading from the exhaust gas temperature sensor located farthest upstream in the aftertreatment system in exhaust bank 1.
     *
     * Range: 0..64255.04 (-273..1734.97 deg C)
     * Scale: 0.03125
     * Offset: -273
     */
    uint16_t aftertreatment1_exhaust_gas_temp1;
};

/**
 * Signals in message AT1IMG.
 *
 * Aftertreatment 1 Intermediate Gas
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_at1_img_t {
    /**
     * The reading from the exhaust gas temperature sensor located midstream of the other two temperature sensors in the
     *
     * Range: 0..64255.04 (-273..1734.97 deg C)
     * Scale: 0.03125
     * Offset: -273
     */
    uint16_t aftertreatment1_exhaust_gas_temp2;
};

/**
 * Signals in message AT1OG2.
 *
 * Aftertreatment 1 Outlet Gas 2
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_at1_og2_t {
    /**
     * The reading from the exhaust gas temperature sensor located farthest downstream in the aftertreatment system in
     *
     * Range: 0..64255.04 (-273..1734.97 deg C)
     * Scale: 0.03125
     * Offset: -273
     */
    uint16_t aftertreatment1_exhaust_gas_temp3;
};

/**
 * Signals in message EGT_DATA.
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_egt_data_t {
    /**
     * Range: -50000..120000 (-500..1200 C)
     * Scale: 0.01
     * Offset: 0
     */
    int32_t egt_data_0;

    /**
     * Range: -50000..120000 (-500..1200 C)
     * Scale: 0.01
     * Offset: 0
     */
    int32_t egt_data_1;
};

/**
 * Signals in message EGT_DATA_0.
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_egt_data_0_t {
    /**
     * Range: -50000..120000 (-500..1200 C)
     * Scale: 0.01
     * Offset: 0
     */
    int32_t egt_0;

    /**
     * Range: -50000..120000 (-500..1200 C)
     * Scale: 0.01
     * Offset: 0
     */
    int32_t egt_1;
};

/**
 * Signals in message EGT_DATA_1.
 *
 * All signal values are as on the CAN bus.
 */
struct rmu_ctrl_canbus_data_egt_data_1_t {
    /**
     * Range: -50000..120000 (-500..1200 C)
     * Scale: 0.01
     * Offset: 0
     */
    int32_t egt_2;

    /**
     * Range: -50000..120000 (-500..1200 C)
     * Scale: 0.01
     * Offset: 0
     */
    int32_t egt_3;
};

/**
 * Pack message DPFC1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_dpfc1_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_dpfc1_t *src_p,
    size_t size);

/**
 * Unpack message DPFC1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_dpfc1_unpack(
    struct rmu_ctrl_canbus_data_dpfc1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rmu_ctrl_canbus_data_dpfc1_dsl_prtclt_fltr_pssv_rgnrtion_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_dpfc1_dsl_prtclt_fltr_pssv_rgnrtion_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_dpfc1_dsl_prtclt_fltr_pssv_rgnrtion_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rmu_ctrl_canbus_data_dpfc1_dsl_prtclt_fltr_actv_rgnrtion_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_dpfc1_dsl_prtclt_fltr_actv_rgnrtion_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_dpfc1_dsl_prtclt_fltr_actv_rgnrtion_status_is_in_range(uint8_t value);

/**
 * Pack message IC1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_ic1_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_ic1_t *src_p,
    size_t size);

/**
 * Unpack message IC1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_ic1_unpack(
    struct rmu_ctrl_canbus_data_ic1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_ic1_eng_exhaust_gas_temp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_ic1_eng_exhaust_gas_temp_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_ic1_eng_exhaust_gas_temp_is_in_range(uint16_t value);

/**
 * Pack message LFE.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_lfe_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_lfe_t *src_p,
    size_t size);

/**
 * Unpack message LFE.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_lfe_unpack(
    struct rmu_ctrl_canbus_data_lfe_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_lfe_eng_fuel_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_lfe_eng_fuel_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_lfe_eng_fuel_rate_is_in_range(uint16_t value);

/**
 * Pack message EI.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_ei_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_ei_t *src_p,
    size_t size);

/**
 * Unpack message EI.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_ei_unpack(
    struct rmu_ctrl_canbus_data_ei_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_ei_instantaneous_est_brake_power_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_ei_instantaneous_est_brake_power_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_ei_instantaneous_est_brake_power_is_in_range(uint16_t value);

/**
 * Pack message EGF1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_egf1_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_egf1_t *src_p,
    size_t size);

/**
 * Unpack message EGF1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_egf1_unpack(
    struct rmu_ctrl_canbus_data_egf1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_egf1_eng_intake_air_mass_flow_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_egf1_eng_intake_air_mass_flow_rate_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_egf1_eng_intake_air_mass_flow_rate_is_in_range(uint16_t value);

/**
 * Pack message EEC3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_eec3_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_eec3_t *src_p,
    size_t size);

/**
 * Unpack message EEC3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_eec3_unpack(
    struct rmu_ctrl_canbus_data_eec3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_eec3_aftrtratment1_exhaust_gas_mass_flow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_eec3_aftrtratment1_exhaust_gas_mass_flow_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_eec3_aftrtratment1_exhaust_gas_mass_flow_is_in_range(uint16_t value);

/**
 * Pack message EEC2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_eec2_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_eec2_t *src_p,
    size_t size);

/**
 * Unpack message EEC2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_eec2_unpack(
    struct rmu_ctrl_canbus_data_eec2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rmu_ctrl_canbus_data_eec2_eng_percent_load_at_current_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_eec2_eng_percent_load_at_current_speed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_eec2_eng_percent_load_at_current_speed_is_in_range(uint8_t value);

/**
 * Pack message EEC1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_eec1_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_eec1_t *src_p,
    size_t size);

/**
 * Unpack message EEC1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_eec1_unpack(
    struct rmu_ctrl_canbus_data_eec1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rmu_ctrl_canbus_data_eec1_actual_eng_percent_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_eec1_actual_eng_percent_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_eec1_actual_eng_percent_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_eec1_eng_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_eec1_eng_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_eec1_eng_speed_is_in_range(uint16_t value);

/**
 * Pack message EC1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_ec1_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_ec1_t *src_p,
    size_t size);

/**
 * Unpack message EC1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_ec1_unpack(
    struct rmu_ctrl_canbus_data_ec1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_ec1_eng_reference_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_ec1_eng_reference_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_ec1_eng_reference_torque_is_in_range(uint16_t value);

/**
 * Pack message CCVS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_ccvs_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_ccvs_t *src_p,
    size_t size);

/**
 * Unpack message CCVS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_ccvs_unpack(
    struct rmu_ctrl_canbus_data_ccvs_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_ccvs_wheel_based_vehicle_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_ccvs_wheel_based_vehicle_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_ccvs_wheel_based_vehicle_speed_is_in_range(uint16_t value);

/**
 * Pack message AT1IG2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_at1_ig2_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_at1_ig2_t *src_p,
    size_t size);

/**
 * Unpack message AT1IG2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_at1_ig2_unpack(
    struct rmu_ctrl_canbus_data_at1_ig2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_at1_ig2_aftertreatment1_exhaust_gas_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_at1_ig2_aftertreatment1_exhaust_gas_temp1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_at1_ig2_aftertreatment1_exhaust_gas_temp1_is_in_range(uint16_t value);

/**
 * Pack message AT1IMG.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_at1_img_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_at1_img_t *src_p,
    size_t size);

/**
 * Unpack message AT1IMG.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_at1_img_unpack(
    struct rmu_ctrl_canbus_data_at1_img_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_at1_img_aftertreatment1_exhaust_gas_temp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_at1_img_aftertreatment1_exhaust_gas_temp2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_at1_img_aftertreatment1_exhaust_gas_temp2_is_in_range(uint16_t value);

/**
 * Pack message AT1OG2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_at1_og2_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_at1_og2_t *src_p,
    size_t size);

/**
 * Unpack message AT1OG2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_at1_og2_unpack(
    struct rmu_ctrl_canbus_data_at1_og2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rmu_ctrl_canbus_data_at1_og2_aftertreatment1_exhaust_gas_temp3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_at1_og2_aftertreatment1_exhaust_gas_temp3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_at1_og2_aftertreatment1_exhaust_gas_temp3_is_in_range(uint16_t value);

/**
 * Pack message EGT_DATA.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_egt_data_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_egt_data_t *src_p,
    size_t size);

/**
 * Unpack message EGT_DATA.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_egt_data_unpack(
    struct rmu_ctrl_canbus_data_egt_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rmu_ctrl_canbus_data_egt_data_egt_data_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_egt_data_egt_data_0_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_egt_data_egt_data_0_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rmu_ctrl_canbus_data_egt_data_egt_data_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_egt_data_egt_data_1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_egt_data_egt_data_1_is_in_range(int32_t value);

/**
 * Pack message EGT_DATA_0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_egt_data_0_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_egt_data_0_t *src_p,
    size_t size);

/**
 * Unpack message EGT_DATA_0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_egt_data_0_unpack(
    struct rmu_ctrl_canbus_data_egt_data_0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rmu_ctrl_canbus_data_egt_data_0_egt_0_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_egt_data_0_egt_0_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_egt_data_0_egt_0_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rmu_ctrl_canbus_data_egt_data_0_egt_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_egt_data_0_egt_1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_egt_data_0_egt_1_is_in_range(int32_t value);

/**
 * Pack message EGT_DATA_1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rmu_ctrl_canbus_data_egt_data_1_pack(
    uint8_t *dst_p,
    const struct rmu_ctrl_canbus_data_egt_data_1_t *src_p,
    size_t size);

/**
 * Unpack message EGT_DATA_1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rmu_ctrl_canbus_data_egt_data_1_unpack(
    struct rmu_ctrl_canbus_data_egt_data_1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rmu_ctrl_canbus_data_egt_data_1_egt_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_egt_data_1_egt_2_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_egt_data_1_egt_2_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rmu_ctrl_canbus_data_egt_data_1_egt_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double rmu_ctrl_canbus_data_egt_data_1_egt_3_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rmu_ctrl_canbus_data_egt_data_1_egt_3_is_in_range(int32_t value);


#ifdef __cplusplus
}
#endif

#endif
